const User = require('../models/user.model');
const jwt = require('jsonwebtoken');
const sendEmail = require("../utils/sendEmail");
const bcrypt = require('bcrypt');

exports.forgotPassword = async (req, res) => {
    const { email } = req.body;

    try {
        if (!email) {
            return res.status(400).json({ message: 'Vui l√≤ng nh·∫≠p email' });
        }

        const user = await User.findOne({ email });
        if (!user) {
            return res.status(404).json({ message: 'Email kh√¥ng t·ªìn t·∫°i trong h·ªá th·ªëng' });
        }

        const resetToken = jwt.sign({ id: user._id }, process.env.JWT_SECRET, {
            expiresIn: '15m'
        });

        // ƒê·∫¢M B·∫¢O LINK N√ÄY L√Ä LINK FRONTEND
        const resetLink = `http://localhost:3000/reset-password/${resetToken}`;

        const emailHTML = `
            <h3>Xin ch√†o ${user.name},</h3>
            <p>B·∫°n v·ª´a y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u cho t√†i kho·∫£n UniPlan c·ªßa m√¨nh.</p>
            <p>H√£y nh·∫•n v√†o li√™n k·∫øt sau ƒë·ªÉ ti·∫øp t·ª•c:</p>
            <a href="${resetLink}" target="_blank" style="color:blue">${resetLink}</a>
            <p>‚ö†Ô∏è Li√™n k·∫øt n√†y s·∫Ω h·∫øt h·∫°n trong 15 ph√∫t.</p>
            <br>
            <p>UniPlan Team</p>
        `;

        await sendEmail(email, 'üõ† UniPlan - ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u', emailHTML);

        res.status(200).json({ message: 'üì© Link kh√¥i ph·ª•c ƒë√£ ƒë∆∞·ª£c g·ª≠i t·ªõi email c·ªßa b·∫°n.' });

    } catch (error) {
        console.error('[FORGOT PASSWORD]', error.message);
        res.status(500).json({ message: 'L·ªói m√°y ch·ªß. Vui l√≤ng th·ª≠ l·∫°i.' });
    }
};

exports.resetPassword = async (req, res) => {
    const { password } = req.body;
    const { token } = req.params;

    try {
        const decoded = jwt.verify(token, process.env.JWT_SECRET);
        const user = await User.findById(decoded.id);
        if (!user) {
            return res.status(404).json({ message: 'Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i.' });
        }

        // Hash m·∫≠t kh·∫©u m·ªõi
        const hashedPassword = await bcrypt.hash(password, 10);
        user.password = hashedPassword;
        await user.save();

        res.status(200).json({ message: 'ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng!' });
    } catch (error) {
        res.status(400).json({ message: 'Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n.' });
    }
};