// scripts/seedUsers.js

const mongoose = require('mongoose');
const User = require('../backend/models/user.model'); // ƒêi·ªÅu ch·ªânh ƒë∆∞·ªùng d·∫´n n·∫øu c·∫ßn
const bcrypt = require('bcrypt');

const DB_URI = 'mongodb://localhost/uniplan'; // ƒê·ªïi URI n·∫øu d√πng cloud db

// Danh s√°ch user m·∫´u
const sampleUsers = [
    {
        name: "Admin Tan",
        email: "admin@example.com",
        password: "12345678",
        role: "Admin"
    },
    {
        name: "User Tan",
        email: "user@example.com",
        password: "12345678",
        role: "User"
    },
    {
        name: "Manager Tan",
        email: "manager@example.com",
        password: "12345678",
        role: "Manager"
    }
];

async function seed() {
    try {
        await mongoose.connect(DB_URI, {
            useNewUrlParser: true,
            useUnifiedTopology: true
        });

        console.log("‚úÖ K·∫øt n·ªëi database th√†nh c√¥ng");

        // X√≥a h·∫øt ng∆∞·ªùi d√πng c≈© tr∆∞·ªõc khi seed
        await User.deleteMany({});
        console.log("üóëÔ∏è ƒê√£ x√≥a d·ªØ li·ªáu ng∆∞·ªùi d√πng c≈©");

        // Hash m·∫≠t kh·∫©u v√† l∆∞u v√†o database
        for (let user of sampleUsers) {
            const salt = await bcrypt.genSalt(10);
            user.password = await bcrypt.hash(user.password, salt);

            await User.create(user);
            console.log(`‚ûï ƒê√£ th√™m ng∆∞·ªùi d√πng: ${user.email}`);
        }

        console.log("üå± Seed d·ªØ li·ªáu ho√†n t·∫•t!");
        mongoose.connection.close();
    } catch (err) {
        console.error("‚ùå L·ªói khi seeding d·ªØ li·ªáu:", err);
        mongoose.connection.close();
        process.exit(1);
    }
}

seed();